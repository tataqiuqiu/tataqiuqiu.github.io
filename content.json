{"meta":{"title":"大漠落霞","subtitle":null,"description":null,"author":"cuili","url":"https://tataqiuqiu.github.io","root":"/"},"pages":[{"title":"","date":"2022-07-01T07:47:22.756Z","updated":"2022-07-01T07:47:22.756Z","comments":true,"path":"js/src/md5.js","permalink":"https://tataqiuqiu.github.io/js/src/md5.js","excerpt":"","text":"/*! * md5js v1.0.7 * (c) 2017-2018 penyuying * Released under the MIT License. */ (function (global, factory) { typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (factory((global.md5 = {}))); }(this, (function (exports) { 'use strict'; /* eslint-disable */ function md5(text, bit) { var sMessage = text; //this; function RotateLeft(lValue, iShiftBits) { return lValue < iShiftBits | lValue >>> 32 - iShiftBits; } function AddUnsigned(lX, lY) { var lX4, lY4, lX8, lY8, lResult; lX8 = lX & 0x80000000; lY8 = lY & 0x80000000; lX4 = lX & 0x40000000; lY4 = lY & 0x40000000; lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF); if (lX4 & lY4) return lResult ^ 0x80000000 ^ lX8 ^ lY8; if (lX4 | lY4) { if (lResult & 0x40000000) return lResult ^ 0xC0000000 ^ lX8 ^ lY8;else return lResult ^ 0x40000000 ^ lX8 ^ lY8; } else return lResult ^ lX8 ^ lY8; } function F(x, y, z) { return x & y | ~x & z; } function G(x, y, z) { return x & z | y & ~z; } function H(x, y, z) { return x ^ y ^ z; } function I(x, y, z) { return y ^ (x | ~z); } function FF(a, b, c, d, x, s, ac) { a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); } function GG(a, b, c, d, x, s, ac) { a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); } function HH(a, b, c, d, x, s, ac) { a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); } function II(a, b, c, d, x, s, ac) { a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac)); return AddUnsigned(RotateLeft(a, s), b); } function ConvertToWordArray(sMessage) { var lWordCount; var lMessageLength = sMessage.length; var lNumberOfWords_temp1 = lMessageLength + 8; var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64; var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16; var lWordArray = Array(lNumberOfWords - 1); var lBytePosition = 0; var lByteCount = 0; while (lByteCount < lMessageLength) { lWordCount = (lByteCount - lByteCount % 4) / 4; lBytePosition = lByteCount % 4 * 8; lWordArray[lWordCount] = lWordArray[lWordCount] | sMessage.charCodeAt(lByteCount) < lBytePosition; lByteCount++; } lWordCount = (lByteCount - lByteCount % 4) / 4; lBytePosition = lByteCount % 4 * 8; lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 < lBytePosition; lWordArray[lNumberOfWords - 2] = lMessageLength < 3; lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29; return lWordArray; } function WordToHex(lValue) { var WordToHexValue = \"\", WordToHexValue_temp = \"\", lByte, lCount; for (lCount = 0; lCount"},{"title":"","date":"2022-07-01T07:47:22.757Z","updated":"2022-07-01T07:47:22.756Z","comments":true,"path":"js/src/md5.min.js","permalink":"https://tataqiuqiu.github.io/js/src/md5.min.js","excerpt":"","text":"/*! * md5js v1.0.7 * (c) 2017-2018 penyuying * Released under the MIT License. */ !function(n,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],t):t(n.md5={})}(this,function(n){\"use strict\";n.md5=function(n,t){function r(n,t){return n>32-t}function e(n,t){var r,e,u,o,f;return u=2147483648&n,o=2147483648&t,r=1073741824&n,e=1073741824&t,f=(1073741823&n)+(1073741823&t),r&e?2147483648^f^u^o:r|e?1073741824&f?3221225472^f^u^o:1073741824^f^u^o:f^u^o}function u(n,t,u,o,f,i,c){return n=e(n,e(e(function(n,t,r){return n&t|~n&r}(t,u,o),f),c)),e(r(n,i),t)}function o(n,t,u,o,f,i,c){return n=e(n,e(e(function(n,t,r){return n&r|t&~r}(t,u,o),f),c)),e(r(n,i),t)}function f(n,t,u,o,f,i,c){return n=e(n,e(e(function(n,t,r){return n^t^r}(t,u,o),f),c)),e(r(n,i),t)}function i(n,t,u,o,f,i,c){return n=e(n,e(e(function(n,t,r){return t^(n|~r)}(t,u,o),f),c)),e(r(n,i),t)}function c(n){var t,r=\"\",e=\"\";for(t=0;t>>8*t&255).toString(16)).substr(e.length-2,2);return r}var d,a,s,p,l,y,h,v,g,m=n,b=Array();for(b=function(n){for(var t,r=n.length,e=r+8,u=16*((e-e%64)/64+1),o=Array(u-1),f=0,i=0;i"}],"posts":[{"title":"vue 动态组件","slug":"vue动态组件","date":"2022-06-27T03:00:00.000Z","updated":"2022-07-01T07:47:22.690Z","comments":true,"path":"2022/06/27/vue动态组件/","link":"","permalink":"https://tataqiuqiu.github.io/2022/06/27/vue%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6/","excerpt":"1、常用的引用组件方式例子链接 123&lt;div&gt; &lt;ButtonCounter /&gt;&lt;/div&gt; 1234567import ButtonCounter from &quot;./ButtonCounter.vue&quot;export default &#123; components: &#123; ButtonCounter &#125;&#125; 2、考虑如下场景例子链接 1234&lt;div&gt; &lt;button @click=&quot;CreateButtomCounter&quot;&gt;点击加载组件&lt;/button&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/div&gt;","text":"1、常用的引用组件方式例子链接 123&lt;div&gt; &lt;ButtonCounter /&gt;&lt;/div&gt; 1234567import ButtonCounter from &quot;./ButtonCounter.vue&quot;export default &#123; components: &#123; ButtonCounter &#125;&#125; 2、考虑如下场景例子链接 1234&lt;div&gt; &lt;button @click=&quot;CreateButtomCounter&quot;&gt;点击加载组件&lt;/button&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&lt;/div&gt; 1234567import &#123; CreateButtomCounter &#125; from &quot;./CreateButtomCounter.js&quot;export default &#123; methods: &#123; CreateButtomCounter &#125;&#125; CreateButtomCounter.js 12345678910import Vue from &quot;vue&quot;import ButtonCounter from &quot;./ButtonCounter.vue&quot;export const CreateButtomCounter = () =&gt; &#123; const ButtonCounterCom = Vue.extend(ButtonCounter) const instance = new ButtonCounterCom().$mount() const dom = document.querySelector(&quot;#root&quot;) dom.appendChild(instance.$el)&#125; 3、Vue.extend()官方文档 特点：只能通过自身初始化结构使用范围：（1）挂载在某元素下（2）被vue实例的components引用（3）Vue.component组件引用 4、Vue.component()官方文档 特点：（1）可通过自身初始化组件结构（2）可通过引入vue.extend初始化组件结构（3）可通过第三方模版temple.html初始化组件结构使用范围： 任何已被vue初始化的元素内 官方文档 12345678910111213141516&lt;script&gt;//方法3 第三方模板引入Vue.component(&#x27;templecomponent&#x27;, function(resolve, reject) &#123; $.get(&quot;./../xtemplate/com.html&quot;).then(function(res) &#123; resolve(&#123; template: res, props: [&quot;b&quot;], data: function() &#123; return &#123; a: &quot;a&quot; &#125; &#125; &#125;) &#125;)&#125;)&lt;/script&gt; 5、new Vue特点：（1）可以通过自身components引用vue.extend构造，通过自身data向构造传参（2）可以通过自身component引用组件模版，通过自身data向组件传参使用范围：（1）仅限于自身 1234&lt;div id=&quot;app1&quot;&gt; &lt;dt1&gt;&lt;/dt1&gt; &lt;vueapple v-bind:b=&quot;msg&quot;&gt;&lt;/vueapple&gt;&lt;/div&gt; 123&lt;script type=&quot;text/x-template&quot; id=&quot;dt1&quot;&gt; &lt;div&gt;这里是子组件1&lt;/div&gt;&lt;/script&gt; 1234567891011121314&lt;script&gt; new Vue(&#123; el: &quot;#app1&quot;, data: &#123; msg: &quot;vue实例参数&quot; &#125;, components: &#123; dt1: &#123; template: &quot;#dt1&quot; &#125;, vueapple: Profile //【引入构造】 &#125; &#125;);&lt;/script&gt; 6、Vue.component() 与 Vue.extend() 关系调用 Vue.component 时1、调用 Vue.extend，即使用基础 Vue 构造器，创建一个“子类”。2、注册全局组件 官方文档 如果是 new Vue 之后调用 Vue.component 呢？以下代码等价 1234567export const CreateButtomCounter = () =&gt; &#123; const ButtonCounterCom = Vue.component(&#x27;button-counter&#x27;, ButtonCounter) const instance = new ButtonCounterCom().$mount() const dom = document.querySelector(&quot;#root&quot;) dom.appendChild(instance.$el)&#125; 1234567export const CreateButtomCounter = () =&gt; &#123; const ButtonCounterCom = Vue.extend(ButtonCounter) const instance = new ButtonCounterCom().$mount() const dom = document.querySelector(&quot;#root&quot;) dom.appendChild(instance.$el)&#125; 7、常用的引用组件方式 与 Vue.extend() 的关系8、$mount()$mount 方法支持传入 2 个参数，第一个是 el，它表示挂载的元素，可以是字符串，也可以是 DOM 对象，如果是字符串在浏览器环境下会调用 query 方法转换成 DOM 对象的。第二个参数是和服务端渲染相关，在浏览器环境下不需要传第二个参数。 1234const instance = new ButtonCounterCom().$mount() const dom = document.querySelector(&quot;#root&quot;)dom.appendChild(instance.$el) $mount()不带参数，会把组件在内存中渲染完毕instance.$el 拿到的就是组件对应的dom元素,可以直接操作dom 9、经典案例Vue.extend + $mountDialog","categories":[{"name":"javascript","slug":"javascript","permalink":"https://tataqiuqiu.github.io/categories/javascript/"},{"name":"vue","slug":"javascript/vue","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/"},{"name":"组件","slug":"javascript/vue/组件","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tataqiuqiu.github.io/tags/vue/"}]},{"title":"sass常用方法","slug":"sass常用方法","date":"2019-09-20T08:30:00.000Z","updated":"2022-07-01T07:47:22.687Z","comments":true,"path":"2019/09/20/sass常用方法/","link":"","permalink":"https://tataqiuqiu.github.io/2019/09/20/sass%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"一、控制指令:1、@for 循环@for $var from &lt;start&gt; through &lt;end&gt; @for $var from &lt;start&gt; to &lt;end&gt; 当使用 through 时，条件范围包含 &lt;start&gt; 与 &lt;end&gt; 的值，而使用 to 时条件范围只包含 &lt;start&gt; 的值不包含 &lt;end&gt; 的值 123456@for $i from 1 through 3 &#123; .item-#&#123;$i&#125; &#123; transform: rotate(($i * 30) * 1deg); animation: load 1.2s linear (($i - 1) / 10) * 1s infinite; &#125;&#125;","text":"一、控制指令:1、@for 循环@for $var from &lt;start&gt; through &lt;end&gt; @for $var from &lt;start&gt; to &lt;end&gt; 当使用 through 时，条件范围包含 &lt;start&gt; 与 &lt;end&gt; 的值，而使用 to 时条件范围只包含 &lt;start&gt; 的值不包含 &lt;end&gt; 的值 123456@for $i from 1 through 3 &#123; .item-#&#123;$i&#125; &#123; transform: rotate(($i * 30) * 1deg); animation: load 1.2s linear (($i - 1) / 10) * 1s infinite; &#125;&#125; 编译后 123456789101112.item-1 &#123; transform: rotate(30deg); animation: load 1.2s linear 0s infinite;&#125;.item-2 &#123; transform: rotate(60deg); animation: load 1.2s linear 0.1s infinite;&#125;.item-3 &#123; transform: rotate(90deg); animation: load 1.2s linear 0.2s infinite;&#125;","categories":[{"name":"css","slug":"css","permalink":"https://tataqiuqiu.github.io/categories/css/"},{"name":"sass","slug":"css/sass","permalink":"https://tataqiuqiu.github.io/categories/css/sass/"}],"tags":[{"name":"sass","slug":"sass","permalink":"https://tataqiuqiu.github.io/tags/sass/"}]},{"title":"开放封闭原则：1、装饰者模式","slug":"开放封闭原则：1、装饰者模式","date":"2019-09-20T02:30:00.000Z","updated":"2022-07-01T07:47:22.691Z","comments":true,"path":"2019/09/20/开放封闭原则：1、装饰者模式/","link":"","permalink":"https://tataqiuqiu.github.io/2019/09/20/%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99%EF%BC%9A1%E3%80%81%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/","excerpt":"1、通用方法12345678910111213141516Function.prototype.before = function( beforefn ) &#123; const _self = this; return () =&gt; &#123; beforefn.apply( this, arguments ) return _self.apply( this, arguments ) &#125;&#125;Function.prototype.after = function( afterfn ) &#123; const _self = this; return () =&gt; &#123; const ret = _self.apply( this, arguments ) afterfn.apply( this, arguments ) return ret &#125;&#125;","text":"1、通用方法12345678910111213141516Function.prototype.before = function( beforefn ) &#123; const _self = this; return () =&gt; &#123; beforefn.apply( this, arguments ) return _self.apply( this, arguments ) &#125;&#125;Function.prototype.after = function( afterfn ) &#123; const _self = this; return () =&gt; &#123; const ret = _self.apply( this, arguments ) afterfn.apply( this, arguments ) return ret &#125;&#125; 不污染写法 1234567891011121314const before = function ( fn, beforefn ) &#123; return function()&#123; beforefn.apply( this, arguments ) return fn.apply( this, arguments ) &#125;&#125;const a = before( function()&#123;alert(3)&#125;, function()&#123;alert(2)&#125;)a = before(a, function()&#123;alert(1)&#125;)a() 2、例子：数据统计上报1234567891011const showLogin = () =&gt; &#123; console.log( &#x27;打开登录浮层&#x27; )&#125;const log = () =&gt; &#123; console.log( `上报标签为：$&#123;this.getAttribute( &#x27;tag&#x27; )&#125;` )&#125;showLogin = showLogin.after( log )document.getElementById( &#x27;button&#x27; ).onclick = shoLogin 3、例子：用 AOP 动态改变函数的参数123456789const func = param =&gt; &#123; console.log( param )&#125;func = func.before(param =&gt; &#123; param.b = &#x27;b&#x27;&#125;)func( &#123;a: &#x27;a&#x27;&#125; ) // 输出：&#123;a: &#x27;a&#x27;, b: &#x27;b&#x27;&#125; 4、例子：插件式的表单验证1234567891011121314151617181920212223242526272829303132333435Function.prototype.before = function( beforefn ) &#123; const _self = this; return () =&gt; &#123; if ( beforefn.apply( this, arguments ) === false ) &#123; // beforefn 返回 false 的情况直接 return , 不再执行后面的原函数 return &#125; return _self.apply( this, arguments ) &#125;&#125;const validata = () =&gt; &#123; if ( username.value === &#x27;&#x27; ) &#123; alert ( &#x27;用户名不能为空&#x27; ) return false &#125; if ( password.value === &#x27;&#x27; ) &#123; alert ( &#x27;密码不能为空&#x27; ) return false &#125;&#125;const formSubmit = () =&gt; &#123; const param = &#123; username: username.value, password: password.value &#125; ajax( &#x27;http://xxx.com/login&#x27;, param )&#125;formSubmit = formSubmit.before( validata )submitBtn.onclick = () =&gt; &#123; fromSubmit()&#125; 5、注意被装饰过的函数，返回的实际上是一个新的函数，如果在原函数上保存了一些属性，那么这些属性会丢失。 12345678910const func = () =&gt; &#123; alert( 1 )&#125;func.a = &#x27;a&#x27;func = func.after(()=&gt;&#123; alert( 2 )&#125;)alert( func.a ) // 输出：undefined 6、装饰者模式与代理模式最重要的区别是意图和设计目的。 在虚拟代理实现预图片加载的例子中，本体负责设置 img 节点的 src，代理则提供了预加载的功能，这看起来也是“加入行为”的一种方式，但这种方式和装饰者模式的偏重点不一样。装饰者模式是实实在在的为对象增加新的职责和行为，而代理模式的事情还是跟本体一样，最终都是设置src。但代理加入了一些“聪明”的功能，比如在图片真正加载好之前，先使用一张占位的loading图片反馈给客户。","categories":[{"name":"javascript","slug":"javascript","permalink":"https://tataqiuqiu.github.io/categories/javascript/"},{"name":"代码优化","slug":"javascript/代码优化","permalink":"https://tataqiuqiu.github.io/categories/javascript/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"},{"name":"设计模式","slug":"javascript/代码优化/设计模式","permalink":"https://tataqiuqiu.github.io/categories/javascript/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"the Open-Close","slug":"the-Open-Close","permalink":"https://tataqiuqiu.github.io/tags/the-Open-Close/"}]},{"title":"浏览器渲染原理","slug":"浏览器渲染原理","date":"2019-09-19T10:00:00.000Z","updated":"2022-07-01T07:47:22.693Z","comments":true,"path":"2019/09/19/浏览器渲染原理/","link":"","permalink":"https://tataqiuqiu.github.io/2019/09/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/","excerpt":"1、现代web开发","text":"1、现代web开发 2、b-s系统架构图 3、http协议是无状态协议 4、TCP三次握手 5、建立TCP连接 6、dns查询过程原理 7、dns解析 8、完整HTTP请求过程 9、浏览器缓存流程 10、浏览器性能优化","categories":[{"name":"浏览器","slug":"浏览器","permalink":"https://tataqiuqiu.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"渲染原理","slug":"浏览器/渲染原理","permalink":"https://tataqiuqiu.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"browser","slug":"browser","permalink":"https://tataqiuqiu.github.io/tags/browser/"}]},{"title":"两行文字带省略号ellipsis","slug":"ellipsis两行文字的省略号","date":"2019-08-19T03:46:00.000Z","updated":"2022-07-01T07:47:22.684Z","comments":true,"path":"2019/08/19/ellipsis两行文字的省略号/","link":"","permalink":"https://tataqiuqiu.github.io/2019/08/19/ellipsis%E4%B8%A4%E8%A1%8C%E6%96%87%E5%AD%97%E7%9A%84%E7%9C%81%E7%95%A5%E5%8F%B7/","excerpt":"","text":"123&lt;div class=&quot;lastline-space-ellipsis js-toggle-box&quot; title=&quot;你让我只 fdkfjkdsjfdsj dfjdsfadf 5555555 aaaaaa 显示2行就只显示2行啊，你让我只显示2行就只显示2行啊，你让我只显示2行就只显示2行啊&quot; &gt; 你让我只显示2行就只显示2行啊，你让我只显示2行就只显示2行啊，你让我只显示2行就只显示2行啊你让我只显示2行就只显示2行啊，你让我只显示2行就只显示2行啊，你让我只显示2行就只显示2行啊 &lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536.lastline-space-ellipsis &#123; position: relative; max-height: 40px; /*用像素表示，不要用em，以免造成不同浏览器下计算出现小数点取舍不同导致1像素的差距【行高*截取行数】*/ overflow: hidden; word-wrap: break-word; word-break: break-all; /*强制打散字符*/ line-height: 20px; color: #fff; /*同背景色*/&#125;.lastline-space-ellipsis::before,.lastline-space-ellipsis::after &#123; position: absolute; left: 0; top: 0; width: 100%; color: #333; /*实际文本颜色*/ content: attr(title);&#125;.lastline-space-ellipsis::before &#123; display: block; z-index: 1; /*显示在最上面，展示前面的(截取行数-1)行字符*/ max-height: 20px; /*根据行高和截取行数调整，值为[(截取行数-1)*行高]*/ overflow: hidden; background-color: #fff; /*同背景色*/&#125;.lastline-space-ellipsis::after &#123; display: -webkit-box; -webkit-box-orient: vertical; -webkit-box-sizing: border-box; box-sizing: border-box; text-overflow: ellipsis; -webkit-line-clamp: 2; /*截取行数*/ text-indent: -3em; /*行首缩进字符数，值为[-(截取行数-1)*尾部留空字符数]，取负值把每行多padding-right的部分给缩进回去*/ padding-right: 3em; /*尾部留空字符数*/ /*margin-left: -3em;*/&#125;","categories":[{"name":"css","slug":"css","permalink":"https://tataqiuqiu.github.io/categories/css/"},{"name":"ellipsis","slug":"css/ellipsis","permalink":"https://tataqiuqiu.github.io/categories/css/ellipsis/"}],"tags":[{"name":"css","slug":"css","permalink":"https://tataqiuqiu.github.io/tags/css/"}]},{"title":"给github上的博客添加vue-cli搭建的demo","slug":"给github上的博客添加vue-cli搭建的demo","date":"2019-08-05T11:00:00.000Z","updated":"2022-07-01T07:47:22.693Z","comments":true,"path":"2019/08/05/给github上的博客添加vue-cli搭建的demo/","link":"","permalink":"https://tataqiuqiu.github.io/2019/08/05/%E7%BB%99github%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0vue-cli%E6%90%AD%E5%BB%BA%E7%9A%84demo/","excerpt":"记录一下这个blog添加demo的过程 一、创建一个新的github仓库。1、创建库，起名demos","text":"记录一下这个blog添加demo的过程 一、创建一个新的github仓库。1、创建库，起名demos 2、打开settings 3、启用GitHub Pages 二、gitignore文件中 去掉&#x2F;dist目录三、vue-cli3 路径配置1、vue.config.js配置文件中的baseUrl改为相对路径。bulid后的文件静态资源引用就会以相对路径来引入了。包括外链JS、css以及，html内的img标签。 2、router路径更改将base改为目标路径，跳转路由的位置就会以此为根目录进行跳转。","categories":[{"name":"javascript","slug":"javascript","permalink":"https://tataqiuqiu.github.io/categories/javascript/"},{"name":"vue","slug":"javascript/vue","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/"},{"name":"vue-cli","slug":"javascript/vue/vue-cli","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/vue-cli/"}],"tags":[{"name":"vue-cli","slug":"vue-cli","permalink":"https://tataqiuqiu.github.io/tags/vue-cli/"}]},{"title":"vue父子组件双向绑定","slug":"vue父子组件双向绑定","date":"2019-08-05T03:00:00.000Z","updated":"2022-07-01T07:47:22.690Z","comments":true,"path":"2019/08/05/vue父子组件双向绑定/","link":"","permalink":"https://tataqiuqiu.github.io/2019/08/05/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/","excerpt":"1、sync修饰符（v2.3.0+ 新增）父组件代码 12345&lt;div&gt; &lt;child :value.sync=&quot;doc&quot;&gt;&lt;/child&gt; &lt;div&gt;father： &lt;input type=&quot;text&quot; v-model=&quot;doc&quot; /&gt;&lt;/div&gt; &lt;div&gt;result： &lt;span v-html=&quot;doc&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;","text":"1、sync修饰符（v2.3.0+ 新增）父组件代码 12345&lt;div&gt; &lt;child :value.sync=&quot;doc&quot;&gt;&lt;/child&gt; &lt;div&gt;father： &lt;input type=&quot;text&quot; v-model=&quot;doc&quot; /&gt;&lt;/div&gt; &lt;div&gt;result： &lt;span v-html=&quot;doc&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt; 123456789101112import Child from &quot;@/components/Bb-child.vue&quot;;export default &#123; name: &quot;Bb&quot;, components: &#123; Child &#125;, data() &#123; return &#123; doc: &quot;输入试试&quot; &#125;; &#125;&#125;; 子组件代码 123&lt;div&gt; &lt;div&gt;child： &lt;input type=&quot;text&quot; v-model=&quot;val&quot; @input=&quot;iptInput&quot; /&gt;&lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021export default &#123; name: &quot;Bb-child&quot;, props: &#123; value: String &#125;, data() &#123; return &#123; val: this.value &#125;; &#125;, watch: &#123; value(newVal) &#123; this.val = newVal; &#125; &#125;, methods: &#123; iptInput() &#123; this.$emit(&quot;update:value&quot;, this.val); &#125; &#125;&#125;; 2、老版本父组件代码 12345&lt;div&gt; &lt;child :value=&quot;doc&quot; @input=&quot;oninput&quot;&gt;&lt;/child&gt; &lt;div&gt;father： &lt;input type=&quot;text&quot; v-model=&quot;doc&quot; /&gt;&lt;/div&gt; &lt;div&gt;result： &lt;span v-html=&quot;doc&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617import Child from &quot;@/components/Bb-child.2.vue&quot;;export default &#123; name: &quot;Bb&quot;, components: &#123; Child &#125;, data() &#123; return &#123; doc: &quot;输入试试&quot; &#125;; &#125;, methods: &#123; oninput(val) &#123; this.doc = val; &#125; &#125;&#125;; 子组件代码 1&lt;div&gt;child： &lt;input type=&quot;text&quot; v-model=&quot;val&quot; @input=&quot;iptInput&quot; /&gt;&lt;/div&gt; 123456789101112131415161718192021export default &#123; name: &quot;Bb-child.2&quot;, props: &#123; value: String &#125;, data() &#123; return &#123; val: this.value &#125;; &#125;, watch: &#123; value(newVal) &#123; this.val = newVal; &#125; &#125;, methods: &#123; iptInput() &#123; this.$emit(&quot;input&quot;, this.val); &#125; &#125;&#125;;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://tataqiuqiu.github.io/categories/javascript/"},{"name":"vue","slug":"javascript/vue","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/"},{"name":"组件","slug":"javascript/vue/组件","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tataqiuqiu.github.io/tags/vue/"}]},{"title":"vue-test-utils测试用例常用方法","slug":"vue-test-utils测试用例常用方法","date":"2019-08-02T10:00:00.000Z","updated":"2022-07-01T07:47:22.688Z","comments":true,"path":"2019/08/02/vue-test-utils测试用例常用方法/","link":"","permalink":"https://tataqiuqiu.github.io/2019/08/02/vue-test-utils%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"测试用例，代码自动化监测，codereview的第一步。是个不应被忽视的环节。","text":"测试用例，代码自动化监测，codereview的第一步。是个不应被忽视的环节。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import &#123; mount &#125; from &#x27;@vue/test-utils&#x27;import test from &#x27;../index&#x27; // 引入组件const wrapper = mount(test, &#123; // 添加属性 propsData: &#123; type: &#x27;type_1&#x27; &#125;, // 添加插片 slots: &#123; default: &#x27;&lt;div class=&quot;test-msg&quot;&gt;&lt;/div&gt;&#x27; &#125;&#125;)const vm = wrapper.vm // 组件实例it(&#x27;类名是否正确&#x27;, () =&gt; &#123; const container = wrapper.find(&#x27;.container&#x27;) expect(container.contains(&#x27;.class_1&#x27;)).toBe(true) expect(container.classes(&#x27;class_2&#x27;)).toBe(true)&#125;)it(&#x27;触发click事件&#x27;, () =&gt; &#123; wrapper.trigger(&#x27;click&#x27;) expect(wrapper.emitted().click).toBeTruthy()&#125;)it(&#x27;html内容检测&#x27;, () =&gt; &#123; const title = wrapper.find(&#x27;.title&#x27;) expect(title.text()).toBe(&#x27;标题&#x27;) const img = vm.$el.querySelector(&#x27;.img&#x27;) expect(img.src).toBe(&#x27;http://img&#x27;)&#125;)it(&#x27;样式检测&#x27;, () =&gt; &#123; const vm = vm.$el expect(vm.style.width).toBe(&#x27;300px&#x27;)&#125;)it(&#x27;开启检测&#x27;, () =&gt; &#123; expect(wrapper.contains(&#x27;.detail&#x27;)).toBe(true)&#125;)it(&#x27;插片位置是否正确&#x27;, () =&gt; &#123; const minor = wrapper.find(&#x27;.slot&#x27;) expect(minor.contains(&#x27;div.test-msg&#x27;)).toBeTruthy()&#125;)","categories":[{"name":"javascript","slug":"javascript","permalink":"https://tataqiuqiu.github.io/categories/javascript/"},{"name":"vue","slug":"javascript/vue","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/"},{"name":"test-utils","slug":"javascript/vue/test-utils","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/test-utils/"}],"tags":[{"name":"vue-test-utils","slug":"vue-test-utils","permalink":"https://tataqiuqiu.github.io/tags/vue-test-utils/"}]},{"title":"hexo启动部署博客的命令","slug":"hexo启动部署博客的命令","date":"2019-08-02T07:00:00.000Z","updated":"2022-07-01T07:47:22.684Z","comments":true,"path":"2019/08/02/hexo启动部署博客的命令/","link":"","permalink":"https://tataqiuqiu.github.io/2019/08/02/hexo%E5%90%AF%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%91%BD%E4%BB%A4/","excerpt":"使用git bash工具 本地目录1$ e: 00aa/blog 本地预览12$ hexo g $ hexo s 部署到github12$ hexo clean$ hexo d","text":"使用git bash工具 本地目录1$ e: 00aa/blog 本地预览12$ hexo g $ hexo s 部署到github12$ hexo clean$ hexo d","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://tataqiuqiu.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://tataqiuqiu.github.io/tags/hexo/"}]},{"title":"markdown参考","slug":"markdown参考","date":"2019-08-02T06:00:00.000Z","updated":"2022-07-01T07:47:22.685Z","comments":true,"path":"2019/08/02/markdown参考/","link":"","permalink":"https://tataqiuqiu.github.io/2019/08/02/markdown%E5%8F%82%E8%80%83/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot;","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server 12345@media screen and (max-width: 640px) &#123; body &#123; background-color: #f8f8f8; &#125;&#125; More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 在ECMAScript 5的strict模式下，这种情况的`this`已经被规定不会指向全局对象了，而是`undefined` Hexo","categories":[{"name":"博客相关","slug":"博客相关","permalink":"https://tataqiuqiu.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://tataqiuqiu.github.io/tags/markdown/"}]}],"categories":[{"name":"javascript","slug":"javascript","permalink":"https://tataqiuqiu.github.io/categories/javascript/"},{"name":"vue","slug":"javascript/vue","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/"},{"name":"组件","slug":"javascript/vue/组件","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/%E7%BB%84%E4%BB%B6/"},{"name":"css","slug":"css","permalink":"https://tataqiuqiu.github.io/categories/css/"},{"name":"sass","slug":"css/sass","permalink":"https://tataqiuqiu.github.io/categories/css/sass/"},{"name":"代码优化","slug":"javascript/代码优化","permalink":"https://tataqiuqiu.github.io/categories/javascript/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"},{"name":"设计模式","slug":"javascript/代码优化/设计模式","permalink":"https://tataqiuqiu.github.io/categories/javascript/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"浏览器","slug":"浏览器","permalink":"https://tataqiuqiu.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"渲染原理","slug":"浏览器/渲染原理","permalink":"https://tataqiuqiu.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"},{"name":"ellipsis","slug":"css/ellipsis","permalink":"https://tataqiuqiu.github.io/categories/css/ellipsis/"},{"name":"vue-cli","slug":"javascript/vue/vue-cli","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/vue-cli/"},{"name":"test-utils","slug":"javascript/vue/test-utils","permalink":"https://tataqiuqiu.github.io/categories/javascript/vue/test-utils/"},{"name":"博客相关","slug":"博客相关","permalink":"https://tataqiuqiu.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://tataqiuqiu.github.io/tags/vue/"},{"name":"sass","slug":"sass","permalink":"https://tataqiuqiu.github.io/tags/sass/"},{"name":"the Open-Close","slug":"the-Open-Close","permalink":"https://tataqiuqiu.github.io/tags/the-Open-Close/"},{"name":"browser","slug":"browser","permalink":"https://tataqiuqiu.github.io/tags/browser/"},{"name":"css","slug":"css","permalink":"https://tataqiuqiu.github.io/tags/css/"},{"name":"vue-cli","slug":"vue-cli","permalink":"https://tataqiuqiu.github.io/tags/vue-cli/"},{"name":"vue-test-utils","slug":"vue-test-utils","permalink":"https://tataqiuqiu.github.io/tags/vue-test-utils/"},{"name":"hexo","slug":"hexo","permalink":"https://tataqiuqiu.github.io/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"https://tataqiuqiu.github.io/tags/markdown/"}]}